/**
 * This class is the core of the game system
 * @author  Zilong Wang 
 * @version 1.0 
 * Last Modified: <09-19-2015> - <adding comments> <Zilong Wang>
 *                <09-22-2015> - <adjusting the way of skipping and quiting game> <Zilong Wang>
 */
public class TriviaGameSystem
{
    private Questions[] questions; //accept array from other class
    //totQuesRight = total number anwser right
    //totQuesSkip = total question skipped
    private int numOfQuestions, score, totQuesRight, totQuesSkip;
    private UserInteraction ui = new UserInteraction();
    private final int ASCII_FOR_A = 65; //ASCII code for char "A" is 65
    //constants used for defining returnning number in the judgeAnswer class
    private final int QUIT_NUM = -1, SKIP_NUM = 0, CHOICE_EXIST = 1, CHOICE_NOT_EXIST = -2;

    public TriviaGameSystem(Questions[] questions, int numOfQuestions)
    {
        this.questions = questions;
        this.numOfQuestions = numOfQuestions;
        coreSystem();
    }

    private void coreSystem()
    {
        if(questions != null)
        {
            ui.println("This example trivia game contains " + numOfQuestions + " questions:");

            //"i" is the index of each question include the information associated with it
            for(int i = 0; i < numOfQuestions; i++)
            {
                ui.println(questionHeader(i, questions[i].getPoint(), score));
                ui.println("\t\t\t" + questions[i].getQuestion());
                showChoices(i);

                char userKey = ui.getChar("Please enter the answer");
                do{
                    if(judgeAnswer(userKey, i) == CHOICE_NOT_EXIST) //re-enter if choice doesn't exist
                    {
                        userKey = ui.getChar("Chioce doesn't exist, please re-enter"); 
                    }

                    if(judgeAnswer(userKey, i) == CHOICE_EXIST)
                    {
                        if(isCorrect(userKey, questions[i].getAnswer()))
                        {
                            ui.println("*Correct!*");
                            score += questions[i].getPoint();
                            totQuesRight++;                        
                        }
                        else ui.println("*You were wrong!*");

                        ui.pause(); //pause the game after answer the question
                    }
                    else if(judgeAnswer(userKey, i) == 0)
                    {
                        totQuesSkip++;
                        ui.pause(); //pause the game when skip the question
                        continue;
                    }  
                    //else ui.getChar("Choice doesn't exist, please re-enter"); 
                }while(judgeAnswer(userKey, i) == CHOICE_NOT_EXIST); //enter invalid choice char will occuer re-enter notice

                if(judgeAnswer(userKey, i) == QUIT_NUM) 
                {
                    //if quit the game then each questions hasn't been answered will be counted as skipped
                    totQuesSkip += (numOfQuestions - i);//"numOfQuestions - i" means questions left
                    break; //if choose the last choice which is "Quit", then qiut the game
                }
            }          

            ending(); //end the game when loop ends (break or run to the end of loop)
        }
        else error(); //print error when there is error information in the file
    }

    private void showChoices(int indexOfQuestions)
    {
        String[] tempChoice = questions[indexOfQuestions].getChoices();

        for(int indexOfChoice = 0; indexOfChoice < questions[indexOfQuestions].getNumOfChoices(); indexOfChoice++)
        {
            ui.println("\t\t\t\t" + (char)(ASCII_FOR_A + indexOfChoice) + " " + tempChoice[indexOfChoice]);
        }
    }

    private void reEnterChoice(char userKey, int indexOfQuestions)
    {

    }

    private int judgeAnswer(char userInput, int indexOfQuestions)
    {                                                       
        int AsciiForLastChoices = ASCII_FOR_A + questions[indexOfQuestions].getNumOfChoices() - 1 ;

        if ((int)userInput == AsciiForLastChoices) return QUIT_NUM; //"-1" for quit the game
        else if((int)userInput == AsciiForLastChoices - 1) return SKIP_NUM; //"0" for skip the question 
        else if((int)userInput < AsciiForLastChoices - 1 && (int)userInput >= ASCII_FOR_A)return CHOICE_EXIST; //"1" for answer the question

        return CHOICE_NOT_EXIST; // if the user's request doesnt exsit in the options
    }

    private boolean isCorrect(char key, char answer)
    {
        return key == answer;
    }

    private void error()
    {
        ui.println("File is empty");
    }

    private void ending()
    {
        ui.print("\n" + "The final score: " + score + "\n" + "The number of correct questions answered: " + totQuesRight 
            + "\n" + "The number of questions skipped: " + totQuesSkip);
    }

    private String questionHeader(int indexOfQuestion, int point, int mark)
    {
        int questionLable =  indexOfQuestion + 1; //show 1 is the first question or not 0

        return "\t" + "(" + questionLable + "/" + numOfQuestions + ")" 
        + ". "  + "points = " + point + ", Your score = " + mark;
    }
}
